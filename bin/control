#!/bin/bash 

# Sorce Utility Functions
source $OPENSHIFT_CARTRIDGE_SDK_BASH

STOPTIMEOUT=10
FMT="%a %b %d %Y %H:%M:%S GMT%z (%Z)"

ndir=${OPENSHIFT_NODEJS_DIR%/}
repo=${OPENSHIFT_REPO_DIR%/} 
tmp=${OPENSHIFT_TMP_DIR%/}
home=${OPENSHIFT_HOMEDIR%/} 
data=${OPENSHIFT_DATA_DIR%/}
pdir=${OPENSHIFT_NODEJS_PID_DIR%/} 
aname=$OPENSHIFT_APP_NAME

function print_missing_package_json_error() {
	client_error "package.json not found."
}

function print_missing_entry_error() {
	client_error "NO ENTRY FOUND.  Please make sure one of the following is set:"
	client_error "	1) \"scripts\": \"start\" in package.json"
	client_error "	2) "main" in package.json"
}

function pre-build() {
	rm -rf $tmp/{node_modules,saved.node_modules}

	# If the node_modules/ directory exists, then "stash" it away for redeploy.
	nmdir=$repo/node_modules
	if [ -d $nmdir ]; then
	    echo "Saving away previously installed Node modules"
	    mv $nmdir $tmp/saved.node_modules
	    mkdir -p $nmdir
	fi
}

function post-deploy() {
    :
}

function build() {
	# If old modules exist, restore them to save time building
	if [ -d $tmp/saved.node_modules ]; then
	    nmdir=$repo/node_modules/
	    for d in $( ls -a $tmp/saved.node_modules ); do
	        [ -e $nmdir/$d ] || mv $tmp/saved.node_modules/$d $nmdir
	    done
	    rm -rf $tmp/saved.node_modules
	fi
	
	# If force rebuild marker found, wipe everything and rebuild from scratch
	if [ -f $repo/.openshift/markers/force_clean_build ]; then
	    echo ".openshift/markers/force_clean_build found!  Recreating npm modules" 1>&2
	    rm -rf $ndir/node_modules/*
	    rm -rf $home/.npm/*
	    rm -rf $repo/node_modules/*
	fi
	
	# newer versions of Node set tmp to $HOME/tmp, which is not available.	
	npm config set tmp $tmp
	unset GIT_DIR
	unset GIT_WORK_TREE

	if [ -f $repo/package.json ]; then
		export HOME=$data
		(cd $repo; npm install --production --no-color --no-spin)
	else
		print_missing_package_json_error
		exit 1
	fi
}


function start() {
	
	if ! [ -f $repo/package.json ]; then
		print_missing_package_json_error
		exit 1;
	fi
	main_js="$( get_main_script_from_package_json )"
	start_script="$( get_start_script_from_package_json )"
	
	if [ -n "$start_script" ]; then
		start_cmd="npm -d start"
	elif ! [ -f $repo/$main_js ]; then
		print_missing_entry_error
		exit 1
	else
		start_cmd="node $main_js"
	fi

	pushd $repo > /dev/null
	echo "`date +"$FMT"`: Starting application '$aname' ..." |& /usr/bin/logshifter -tag nodejs 

	# Gulp applications require a home and temp environment varibles to be set to someplace with permissions
	export HOME=$data

	nohup $start_cmd < /dev/null |& /usr/bin/logshifter -tag nodejs &
	
	ret=$?
	npid=$!
	popd > /dev/null
	if [ $ret -eq 0 ]; then
		echo $npid > $pdir/node.pid
	else
		echo "Application '$aname' failed to start - $ret" 1>&2
		exit $ret
	fi
}

function stop() {
	pid=$( cat $pdir/node.pid 2> /dev/null )
	if [ -n "$pid" ]; then
		echo "`date +"$FMT"`: Stopping application '$aname' ..." |& /usr/bin/logshifter -tag nodejs 
		pgid=$( ps -o pgid --no-headers $pid | tr -d ' ')
		/bin/kill -TERM -$pgid
		ret=$?
		if [ $ret -eq 0 ]; then
			TIMEOUT=$STOPTIMEOUT
			while [ $TIMEOUT -gt 0 ] && is_node_service_running ; do
				/bin/kill -0 -$pgid > /dev/null 2>&1 || break
				sleep 1
				let TIMEOUT-=1
			done
		fi

		if is_node_service_running ; then
			killall -9 node > /dev/null 2>&1 || :
		fi
	
		echo "`date +"$FMT"`: Stopped Node application '$aname'" |& /usr/bin/logshifter -tag nodejs
		rm -f $pdir/node.pid
	else
		if `pgrep -x node -u $(id -u)  > /dev/null 2>&1`; then
			echo "Warning: Application '$aname' Node server exists without a pid file.  Use force-stop to kill." 1>&2
		fi
	fi
}

function restart() {
    stop
    start
}

function is_node_service_running() {
	if [ -f $pdir/node.pid ]; then
		node_pid=$( cat $pdir/node.pid 2> /dev/null )
		myid=$( id -u )
		if `ps --pid $node_pid 2>&1 | grep node > /dev/null 2>&1` || `pgrep -x node -u $myid > /dev/null 2>&1`; then
			return 0
		fi
	fi

	return 1
}

function status() {
	if is_node_service_running ; then
		client_result 'Application is running.'
	else
		client_result 'Application is not running.'
	fi
}

function tidy() {
	shopt -s dotglob
	rm -rf $OPENSHIFT_LOG_DIR/nodejs.log*
	rm -rf $tmp/*
}

function get_main_script_from_package_json() {
	python <<PYTHON
import json
try:
	with open('$repo/package.json', 'r') as f:
		pj = json.loads(f.read())
		m = pj['main'] if pj['main'] else 'server.js'
		print(m)
except:
	print('server.js')
PYTHON
}

function get_start_script_from_package_json() {
	python <<PYTHON
import json
try:
	with open('$repo/package.json', 'r') as f:
		pj = json.loads(f.read())
		if 'scripts' in pj:
			if 'start' in pj['scripts']:
				print(pj['scripts']['start'])
		else:
			print('')
except:
	print('')
PYTHON
}

#
# main():
#

# Ensure arguments
if ! [ $# -eq 1 ]; then
    echo "Usage: $0 [start|restart|stop|status]"
    exit 1
fi

# Handle commands.
case ${1} in
    start)              start               ;;
    restart)            restart             ;;
    stop)               stop                ;;
    status)             status		        ;;
    build)              build               ;;
    pre-build)          pre-build           ;;
    post-deploy)        post-deploy         ;;
    tidy)               tidy                ;;
    *)                  exit 0
esac
