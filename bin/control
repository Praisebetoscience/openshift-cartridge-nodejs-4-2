#!/bin/bash

STOPTIMEOUT=10
FMT="%a %b %d %Y %H:%M:%S GMT%z (%Z)"

function print_missing_package_json_error() {
    cat <<ERROR
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ERROR: package.json not found.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
ERROR
}

function print_missing_entry_error() {
	cat <<ERROR
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
NO ENTRY FOUND.  Please make sure one of the following is
set:

1) "scripts": "start" in package.json
2) "main" in package.json
3) main file named server.js
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
ERROR
}

function pre-build() {
	rm -rf ${OPENSHIFT_NODEJS_DIR}tmp/{node_modules,saved.node_modules}

	# If the node_modules/ directory exists, then "stash" it away for redeploy.
	node_modules_dir="${OPENSHIFT_REPO_DIR}node_modules"
	if [ -d "$node_modules_dir" ]; then
	    echo 'Saving away previously installed Node modules'
	    mv "$node_modules_dir" "${OPENSHIFT_NODEJS_DIR}tmp/saved.node_modules"
	    mkdir -p "$node_modules_dir"
	fi
}

function post-deploy() {
    :
}

function build() {
	# If old modules exist, restore them to save time building
	if [ -d "${OPENSHIFT_NODEJS_DIR}tmp/saved.node_modules" ]; then
	    node_modules_dir="${OPENSHIFT_REPO_DIR}node_modules/"
	    for d in `ls -a ${OPENSHIFT_NODEJS_DIR}tmp/saved.node_modules`; do
	        [ -e "${node_modules_dir}$d" ] || mv "${OPENSHIFT_NODEJS_DIR}tmp/saved.node_modules/$d" "${node_modules_dir}"
	    done
	    rm -rf "${OPENSHIFT_NODEJS_DIR}tmp/saved.node_modules"
	fi
	
	# If force rebuild marker found, wipe everything and rebuild from scratch
	if [ -f "${OPENSHIFT_REPO_DIR}.openshift/markers/force_clean_build" ]; then
	    echo ".openshift/markers/force_clean_build found!  Recreating npm modules" 1>&2
	    rm -rf "${OPENSHIFT_NODEJS_DIR}"node_modules/*
	    rm -rf "${OPENSHIFT_HOMEDIR}".npm/*
	    rm -rf "${OPENSHIFT_REPO_DIR}"node_modules/*
	fi
	
	# newer versions of Node set tmp to $HOME/tmp, which is not available.	
	npm config set tmp $OPENSHIFT_TMP_DIR
	unset GIT_DIR
	unset GIT_WORK_TREE

	if [ -f "${OPENSHIFT_REPO_DIR}"/package.json ]; then
		export HOME=${OPENSHIFT_DATA_DIR}
    	export TEMP=${OPENSHIFT_TMP_DIR}
		(cd "${OPENSHIFT_REPO_DIR}"; npm install --production --no-color --no-spin)
	else
		print_missing_package_json_error
		exit 1
	fi
}


function start() {
	logf="${OPENSHIFT_NODEJS_LOG_DIR}node.log"
	
	if ! [ -f ${OPENSHIFT_REPO_DIR}package.json ]; then
		print_missing_package_json_error
		exit 1;
	fi
	main_js="$( get_main_script_from_package_json )"
	start_script="$( get_start_script_from_package_json )"
	
	if [ "$start_script" != "False" ]; then
		executor_commandline="npm start -d"
	elif [ "$main_js" != "server.js" ] && ! [ -f "${OPENSHIFT_REPO_DIR}server.js" ]; then
		print_missin_package_info_error
		exit 1
	else
		executor_commandline="node $main_js"
	fi

	pushd "$OPENSHIFT_REPO_DIR" > /dev/null
	echo "`date +"$FMT"`: Starting application '$OPENSHIFT_APP_NAME' ..." >> $logf

	# Gulp applications require a home and temp environment varibles to be set to someplace with permissions
	export HOME=${OPENSHIFT_DATA_DIR}
    export TEMP=${OPENSHIFT_TMP_DIR}

	nohup $executor_commandline >> $logf 2>&1 &
	
	ret=$?
	npid=$!
	popd > /dev/null
	if [ $ret -eq 0 ]; then
		echo "$npid" > "${OPENSHIFT_NODEJS_PID_DIR}node.pid"
	else
		echo "Application '$OPENSHIFT_APP_NAME' failed to start - $ret" 1>&2
		exit $ret
	fi
}

function stop() {
	if [ -f ${OPENSHIFT_NODEJS_PID_DIR}node.pid ]; then
		pid=$( cat ${OPENSHIFT_NODEJS_PID_DIR}node.pid 2> /dev/null )
	fi

	if [ -n "$pid" ]; then
		logf="${OPENSHIFT_NODEJS_LOG_DIR}/node.log"
		echo "`date +"$FMT"`: Stopping application '$OPENSHIFT_APP_NAME' ..." >> $logf
		pgid=$( ps -o pgid --no-headers "$pid" | tr -d ' ')
		/bin/kill -TERM -"$pgid"
		ret=$?
		if [ $ret -eq 0 ]; then
			TIMEOUT="$STOPTIMEOUT"
			while [ $TIMEOUT -gt 0 ] && is_node_service_running ; do
				/bin/kill -0 -"$pgid" > /dev/null 2>&1 || break
				sleep 1
				let TIMEOUT=${TIMEOUT}-1
			done
		fi

		if is_node_service_running ; then
			killall -9 node > /dev/null 2>&1 || :
		fi
	
		echo "`date +"$FMT"`: Stopped Node application '$OPENSHIFT_APP_NAME'" >> $logf
		rm -f ${OPENSHIFT_NODEJS_PID_DIR}node.pid
	else
		if `pgrep -x node -u $(id -u)  > /dev/null 2>&1`; then
			echo "Warning: Application '$OPENSHIFT_APP_NAME' Node server exists without a pid file.  Use force-stop to kill." 1>&2
		fi
	fi
}

function restart() {
    stop
    start
}

function is_node_service_running() {
	if [ -f ${OPENSHIFT_NODEJS_PID_DIR}node.pid ]; then
		node_pid=$( cat ${OPENSHIFT_NODEJS_PID_DIR}node.pid 2> /dev/null )
		myid=$( id -u )
		if `ps --pid $node_pid 2>&1 | grep node > /dev/null 2>&1` || `pgrep -x node -u $myid > /dev/null 2>&1`; then
			return 0
		fi
	fi

	return 1
}

function status() {
	if is_node_service_running ; then
		client_result 'Application is running.'
	else
		client_result 'Application is not running.'
	fi
}

function tidy() {
	client_message "Emptying log dir: $OPENSHIFT_NODEJS_LOG_DIR"
	shopt -s dotglob
	rm -rf ${OPENSHIFT_NODEJS_LOG_DIR}*
	rm -rf ${OPENSHIFT_NODEJS_DIR}tmp/*
}

function get_main_script_from_package_json() {
	python <<PYTHON
import json
try:
	with open('${OPENSHIFT_REPO_DIR}package.json', 'r') as f:
		pj = json.loads(f.read())
		m = pj['main'] if pj['main'] else 'server.js'
		print(m)
except:
	print('server.js')
PYTHON
}

function get_start_script_from_package_json() {
	python <<PYTHON
import json
try:
	with open('${OPENSHIFT_REPO_DIR}package.json', 'r') as f:
		pj = json.loads(f.read())
		if 'scripts' in pj:
			if 'start' in pj['scripts']:
				print(pj['scripts']['start'])
		else:
			print(False)
except:
	print(False)
PYTHON
}

#
# main():
#

# Ensure arguments
if ! [ $# -eq 1 ]; then
    echo "Usage: $0 [start|restart|stop|status]"
    exit 1
fi

# Sorce Utility Functions
source $OPENSHIFT_CARTRIDGE_SDK_BASH

# Handle commands.
case ${1} in
    start)              start               ;;
    restart)            restart             ;;
    stop)               stop                ;;
    status)             status		        ;;
    build)              build               ;;
    pre-build)          pre-build           ;;
    post-deploy)        post-deploy         ;;
    tidy)               tidy                ;;
    *)                  exit 0
esac
